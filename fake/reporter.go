// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/stride/contract"
)

type Reporter struct {
	ErrorStub        func(string, ...interface{})
	errorMutex       sync.RWMutex
	errorArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	InfoStub        func(string, ...interface{})
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	NoticeStub        func(string, ...interface{})
	noticeMutex       sync.RWMutex
	noticeArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	SuccessStub        func(string, ...interface{})
	successMutex       sync.RWMutex
	successArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	WarnStub        func(string, ...interface{})
	warnMutex       sync.RWMutex
	warnArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
	WithStub        func(contract.Severity) contract.Reporter
	withMutex       sync.RWMutex
	withArgsForCall []struct {
		arg1 contract.Severity
	}
	withReturns struct {
		result1 contract.Reporter
	}
	withReturnsOnCall map[int]struct {
		result1 contract.Reporter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Reporter) Error(arg1 string, arg2 ...interface{}) {
	fake.errorMutex.Lock()
	fake.errorArgsForCall = append(fake.errorArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Error", []interface{}{arg1, arg2})
	fake.errorMutex.Unlock()
	if fake.ErrorStub != nil {
		fake.ErrorStub(arg1, arg2...)
	}
}

func (fake *Reporter) ErrorCallCount() int {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	return len(fake.errorArgsForCall)
}

func (fake *Reporter) ErrorCalls(stub func(string, ...interface{})) {
	fake.errorMutex.Lock()
	defer fake.errorMutex.Unlock()
	fake.ErrorStub = stub
}

func (fake *Reporter) ErrorArgsForCall(i int) (string, []interface{}) {
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	argsForCall := fake.errorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Reporter) Info(arg1 string, arg2 ...interface{}) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Info", []interface{}{arg1, arg2})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(arg1, arg2...)
	}
}

func (fake *Reporter) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *Reporter) InfoCalls(stub func(string, ...interface{})) {
	fake.infoMutex.Lock()
	defer fake.infoMutex.Unlock()
	fake.InfoStub = stub
}

func (fake *Reporter) InfoArgsForCall(i int) (string, []interface{}) {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	argsForCall := fake.infoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Reporter) Notice(arg1 string, arg2 ...interface{}) {
	fake.noticeMutex.Lock()
	fake.noticeArgsForCall = append(fake.noticeArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Notice", []interface{}{arg1, arg2})
	fake.noticeMutex.Unlock()
	if fake.NoticeStub != nil {
		fake.NoticeStub(arg1, arg2...)
	}
}

func (fake *Reporter) NoticeCallCount() int {
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	return len(fake.noticeArgsForCall)
}

func (fake *Reporter) NoticeCalls(stub func(string, ...interface{})) {
	fake.noticeMutex.Lock()
	defer fake.noticeMutex.Unlock()
	fake.NoticeStub = stub
}

func (fake *Reporter) NoticeArgsForCall(i int) (string, []interface{}) {
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	argsForCall := fake.noticeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Reporter) Success(arg1 string, arg2 ...interface{}) {
	fake.successMutex.Lock()
	fake.successArgsForCall = append(fake.successArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Success", []interface{}{arg1, arg2})
	fake.successMutex.Unlock()
	if fake.SuccessStub != nil {
		fake.SuccessStub(arg1, arg2...)
	}
}

func (fake *Reporter) SuccessCallCount() int {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	return len(fake.successArgsForCall)
}

func (fake *Reporter) SuccessCalls(stub func(string, ...interface{})) {
	fake.successMutex.Lock()
	defer fake.successMutex.Unlock()
	fake.SuccessStub = stub
}

func (fake *Reporter) SuccessArgsForCall(i int) (string, []interface{}) {
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	argsForCall := fake.successArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Reporter) Warn(arg1 string, arg2 ...interface{}) {
	fake.warnMutex.Lock()
	fake.warnArgsForCall = append(fake.warnArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	fake.recordInvocation("Warn", []interface{}{arg1, arg2})
	fake.warnMutex.Unlock()
	if fake.WarnStub != nil {
		fake.WarnStub(arg1, arg2...)
	}
}

func (fake *Reporter) WarnCallCount() int {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return len(fake.warnArgsForCall)
}

func (fake *Reporter) WarnCalls(stub func(string, ...interface{})) {
	fake.warnMutex.Lock()
	defer fake.warnMutex.Unlock()
	fake.WarnStub = stub
}

func (fake *Reporter) WarnArgsForCall(i int) (string, []interface{}) {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	argsForCall := fake.warnArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Reporter) With(arg1 contract.Severity) contract.Reporter {
	fake.withMutex.Lock()
	ret, specificReturn := fake.withReturnsOnCall[len(fake.withArgsForCall)]
	fake.withArgsForCall = append(fake.withArgsForCall, struct {
		arg1 contract.Severity
	}{arg1})
	fake.recordInvocation("With", []interface{}{arg1})
	fake.withMutex.Unlock()
	if fake.WithStub != nil {
		return fake.WithStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.withReturns
	return fakeReturns.result1
}

func (fake *Reporter) WithCallCount() int {
	fake.withMutex.RLock()
	defer fake.withMutex.RUnlock()
	return len(fake.withArgsForCall)
}

func (fake *Reporter) WithCalls(stub func(contract.Severity) contract.Reporter) {
	fake.withMutex.Lock()
	defer fake.withMutex.Unlock()
	fake.WithStub = stub
}

func (fake *Reporter) WithArgsForCall(i int) contract.Severity {
	fake.withMutex.RLock()
	defer fake.withMutex.RUnlock()
	argsForCall := fake.withArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Reporter) WithReturns(result1 contract.Reporter) {
	fake.withMutex.Lock()
	defer fake.withMutex.Unlock()
	fake.WithStub = nil
	fake.withReturns = struct {
		result1 contract.Reporter
	}{result1}
}

func (fake *Reporter) WithReturnsOnCall(i int, result1 contract.Reporter) {
	fake.withMutex.Lock()
	defer fake.withMutex.Unlock()
	fake.WithStub = nil
	if fake.withReturnsOnCall == nil {
		fake.withReturnsOnCall = make(map[int]struct {
			result1 contract.Reporter
		})
	}
	fake.withReturnsOnCall[i] = struct {
		result1 contract.Reporter
	}{result1}
}

func (fake *Reporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.errorMutex.RLock()
	defer fake.errorMutex.RUnlock()
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	fake.noticeMutex.RLock()
	defer fake.noticeMutex.RUnlock()
	fake.successMutex.RLock()
	defer fake.successMutex.RUnlock()
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	fake.withMutex.RLock()
	defer fake.withMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Reporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ contract.Reporter = new(Reporter)
