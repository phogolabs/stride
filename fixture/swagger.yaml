openapi: 3.0.1
servers: []
info:
  description: |
    This is a sample HTTP API. The purpose of the project is to demonstrate
    best practices for designing a good architecture for HTTP Restful server in
    Golag.  
  version: "1.0.0"
  title: Bank API 12s2aaaa s123111333
  termsOfService: https://wwww.phogolabs.com
  contact:
    email: contact@phogolabs.com
    url: https://wwww.phogolabs.com
  license:
    name: MIT
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: account
    description: Operations about bank account
  - name: transaction
    description: Operations about bank transaction
  - name: customer
    description: Operations about customer
paths:
  '/customers':
    post:
      tags:
        - customer
      summary: Create an account for given person
      operationId: addUser
      requestBody:
        $ref: '#/components/requestBodies/CustomerInput'
      responses:
        '200':
           description: Returns the user's details
           content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
  '/customer/{customerId}':
    get:
      tags:
        - customer
      summary: Gets the bank's customer for given id
      description: Returns a customer's details
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All accounts associated with the current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerOutput'
    put:
      tags:
        - customer
      summary: Keeps the customer's details up to date
      description: Updates all customer's details for given id
      operationId: updateCustomerById
      requestBody:
        $ref: '#/components/requestBodies/CustomerInput'
      parameters:
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Reports that the customer is updated
    delete:
      tags:
        - customer
      summary: Deletes a customer from the bank
      description: Deletes a customer for given id
      operationId: deleteCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of the customer
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Reports that the customer is deleted
  '/accounts/':
    get:
      tags:
        - account
      summary: Get all accounts for the current user
      operationId: getAccounts
      responses:
        '200':
          description: All accounts associated with the current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArrayOutput'
  '/account/{accountId}':
    get:
      tags:
        - account
      summary: Gets the bank account for given id
      description: Returns a bank account for given id
      operationId: getAccountById
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All accounts associated with the current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountOutput'
  '/accounts/{accountId}/transactions/':
    get:
      tags:
        - transaction
      summary: Get all accounts for the current user
      operationId: getTransactions
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All accounts associated with the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions: 
                    $ref: '#/components/schemas/TransactionArray'
components:
  schemas:
    CustomerOutput:
      type: object
      properties:
        customer_id: 
          type: string
          format: uuid
          example: "5995d6a2-01b3-423c-a173-5481df49bdaf"
    Customer:
      type: object
      required: 
        - first_name
        - last_name
        - date_of_birth
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john@example.com"
        date_of_birth:
          type: string
          format: date-time
          example: "2015-08-22T12:20:18Z"
        employment_status:
          $ref: '#/components/schemas/EmploymentStatus'
      xml:
        name: Customer
    AccountArrayOutput:
      type: object
      properties:
        accounts: 
          $ref: '#/components/schemas/AccountArray'
    AccountArray:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AccountOutput:
      type: object
      properties:
        account: 
          $ref: '#/components/schemas/Account'
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "5995d6a2-01b3-423c-a173-5481df49bdaf"
        type:
          type: string
          example: "CURRENT"
        bank_id:
          type: string
          example: "5995d6a2-01b3-423c-a173-5481df49bdaf"
        balance:
          $ref: '#/components/schemas/Balance'
      xml:
        name: Account
    TransactionArray:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    Balance:
      type: object
      properties:
        amount:
          type: integer
          format: double
          example: 13013
        currency:
          type: string
          example: "GBP"
    Transaction:
      type: object
      properties:
        id:
          type: string
          example: tx_00008zIcpb1TB4yeIFXMzx
        balance:
          $ref: '#/components/schemas/Balance'
        value:
          $ref: '#/components/schemas/Balance'
        description:
          type: string
          example: "Salmon sandwich"
        category:
          type: string
          example: "eating_out"
        merchant:
          type: string
          example: "merch_00008zIcpbAKe8shBxXUtl"
        settled_at:
          type: string
          format: date-time
          example: "2015-08-23T12:20:18Z"
        created_at:
          type: string
          format: date-time
          example: "2015-08-22T12:20:18Z"
      xml:
        name: Transaction
    EmploymentStatus:
      type: string
      enum: ["employed", "unemployed"]

  parameters:
    SomeParameter:
      description: Some Parameter
      name: example
      in: query
      schema:
        type: integer
        format: int32
        
  requestBodies:
    CustomerInput:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
      description: Customer's details
      required: true

  responses:
    CustomerOutput:
      description: Customer's details
      headers:
        X-Rate-Limit:
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            type: object
            properties:
              account_id: 
                type: string
                format: uuid
                example: "5995d6a2-01b3-423c-a173-5481df49bdaf"
